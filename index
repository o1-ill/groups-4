                    <button id="saveEdit" class="flex-1 bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700">ÿ≠ŸÅÿ∏</button>
                    <button id="deleteStudent" class="flex-1 bg-red-600 text-white py-2 rounded-lg hover:bg-red-700">ÿ≠ÿ∞ŸÅ</button>
                    <button id="cancelEdit" class="flex-1 bg-gray-600 text-white py-2 rounded-lg hover:bg-gray-700">ÿ•ŸÑÿ∫ÿßÿ°</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Data storage
        let students = JSON.parse(localStorage.getItem('students') || '[]');
        let isAdminMode = false;
        let currentEditingStudent = null;
        const ADMIN_CODE = 'qfvlu10178';

        // Initialize
        updateDisplay();

        // Registration form
        document.getElementById('registrationForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const name = document.getElementById('studentName').value.trim();
            const password = document.getElementById('studentPassword').value;
            const group = document.querySelector('input[name="group"]:checked')?.value;
            
            if (!name || !group) {
                alert('Ÿäÿ±ÿ¨Ÿâ ŸÖŸÑÿ° ÿ¨ŸÖŸäÿπ ÿßŸÑÿ≠ŸÇŸàŸÑ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ©');
                return;
            }
            
            // Check if group is full
            const groupCount = students.filter(s => s.group === group).length;
            if (groupCount >= 100) {
                alert(`ŸÖÿ¨ŸÖŸàÿπÿ© ${group === 'A' ? 'ÿßŸÑÿ®ÿßÿ∑ŸÜŸäÿ©' : 'ÿßŸÑÿ¨ÿ±ÿßÿ≠ÿ©'} ŸÖŸÖÿ™ŸÑÿ¶ÿ©! (ÿßŸÑÿ≠ÿØ ÿßŸÑÿ£ŸÇÿµŸâ 100 ÿ∑ÿßŸÑÿ®)`);
                return;
            }
            
            // Check if name already exists
            if (students.some(s => s.name === name)) {
                alert('Ÿáÿ∞ÿß ÿßŸÑÿßÿ≥ŸÖ ŸÖÿ≥ÿ¨ŸÑ ŸÖÿ≥ÿ®ŸÇÿßŸã');
                return;
            }
            
            // Add student
            students.push({
                id: Date.now(),
                name: name,
                password: password,
                group: group,
                timestamp: new Date().toLocaleString('ar-SA')
            });
            
            localStorage.setItem('students', JSON.stringify(students));
            updateDisplay();
            
            // Reset form
            document.getElementById('registrationForm').reset();
            alert(`ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑŸÉ ÿ®ŸÜÿ¨ÿßÿ≠ ŸÅŸä ŸÖÿ¨ŸÖŸàÿπÿ© ${group === 'A' ? 'A - ÿßŸÑÿ®ÿßÿ∑ŸÜŸäÿ©' : 'B - ÿßŸÑÿ¨ÿ±ÿßÿ≠ÿ©'}! üéâ`);
        });

        // Admin toggle
        document.getElementById('adminToggle').addEventListener('click', function() {
            if (!isAdminMode) {
                const code = prompt('ÿ£ÿØÿÆŸÑ ÿ±ŸÖÿ≤ ÿßŸÑÿ•ÿØÿßÿ±ÿ©:');
                if (code === ADMIN_CODE) {
                    isAdminMode = true;
                    document.getElementById('adminPanel').classList.remove('hidden');
                    this.textContent = 'üîì ÿÆÿ±Ÿàÿ¨ ŸÖŸÜ ÿßŸÑÿ•ÿØÿßÿ±ÿ©';
                    this.classList.remove('bg-gray-600', 'hover:bg-gray-700');
                    this.classList.add('bg-red-600', 'hover:bg-red-700');
                    updateDisplay();
                } else {
                    alert('ÿ±ŸÖÿ≤ ÿßŸÑÿ•ÿØÿßÿ±ÿ© ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠');
                }
            } else {
                isAdminMode = false;
                document.getElementById('adminPanel').classList.add('hidden');
                this.textContent = 'üîê ÿØÿÆŸàŸÑ ÿßŸÑÿ•ÿØÿßÿ±ÿ©';
                this.classList.remove('bg-red-600', 'hover:bg-red-700');
                this.classList.add('bg-gray-600', 'hover:bg-gray-700');
                updateDisplay();
            }
        });

        // Export to Excel
        document.getElementById('exportExcel').addEventListener('click', function() {
            if (students.length === 0) {
                alert('ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ®ŸäÿßŸÜÿßÿ™ ŸÑŸÑÿ™ÿµÿØŸäÿ±');
                return;
            }
            
            const ws = XLSX.utils.json_to_sheet(students.map(s => ({
                'ÿßŸÑÿßÿ≥ŸÖ': s.name,
                'ÿßŸÑŸÖÿ¨ŸÖŸàÿπÿ©': s.group === 'A' ? 'A - ÿßŸÑÿ®ÿßÿ∑ŸÜŸäÿ©' : 'B - ÿßŸÑÿ¨ÿ±ÿßÿ≠ÿ©',
                'ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿ™ÿ≥ÿ¨ŸäŸÑ': s.timestamp
            })));
            
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, 'ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ∑ŸÑÿßÿ®');
            XLSX.writeFile(wb, 'ŸÇÿßÿ¶ŸÖÿ©_ÿßŸÑÿ∑ŸÑÿßÿ®_ÿßŸÑŸÖÿ¨ŸÖŸàÿπÿßÿ™.xlsx');
        });

        // Clear all data
        document.getElementById('clearAll').addEventListener('click', function() {
            if (confirm('ŸáŸÑ ÿ£ŸÜÿ™ ŸÖÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿ≠ÿ∞ŸÅ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ÿü Ÿáÿ∞ÿß ÿßŸÑÿ•ÿ¨ÿ±ÿßÿ° ŸÑÿß ŸäŸÖŸÉŸÜ ÿßŸÑÿ™ÿ±ÿßÿ¨ÿπ ÿπŸÜŸá!')) {
                students = [];
                localStorage.removeItem('students');
                updateDisplay();
                alert('ÿ™ŸÖ ÿ≠ÿ∞ŸÅ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™');
            }
        });

        // Edit student
        function editStudent(studentId) {
            const student = students.find(s => s.id === studentId);
            if (!student) return;
            
            if (!isAdminMode && student.password) {
                const enteredPassword = prompt('ÿ£ÿØÿÆŸÑ ŸÉŸÑŸÖÿ© ÿßŸÑÿ≥ÿ± ŸÑŸÑÿ∑ÿßŸÑÿ®:');
                if (enteredPassword !== student.password) {
                    alert('ŸÉŸÑŸÖÿ© ÿßŸÑÿ≥ÿ± ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠ÿ©');
                    return;
                }
            }
            
            currentEditingStudent = student;
            document.getElementById('editName').value = student.name;
            document.getElementById('editGroup').value = student.group;
            document.getElementById('editModal').classList.remove('hidden');
            document.getElementById('editModal').classList.add('flex');
        }

        // Save edit
        document.getElementById('saveEdit').addEventListener('click', function() {
            const newName = document.getElementById('editName').value.trim();
            const newGroup = document.getElementById('editGroup').value;
            
            if (!newName) {
                alert('Ÿäÿ±ÿ¨Ÿâ ÿ•ÿØÿÆÿßŸÑ ÿßÿ≥ŸÖ ÿµÿ≠Ÿäÿ≠');
                return;
            }
            
            // Check if new name already exists (excluding current student)
            if (students.some(s => s.name === newName && s.id !== currentEditingStudent.id)) {
                alert('Ÿáÿ∞ÿß ÿßŸÑÿßÿ≥ŸÖ ŸÖÿ≥ÿ¨ŸÑ ŸÖÿ≥ÿ®ŸÇÿßŸã');
                return;
            }
            
            // Check if new group is full (excluding current student)
            const groupCount = students.filter(s => s.group === newGroup && s.id !== currentEditingStudent.id).length;
            if (groupCount >= 100) {
                alert(`ŸÖÿ¨ŸÖŸàÿπÿ© ${newGroup === 'A' ? 'ÿßŸÑÿ®ÿßÿ∑ŸÜŸäÿ©' : 'ÿßŸÑÿ¨ÿ±ÿßÿ≠ÿ©'} ŸÖŸÖÿ™ŸÑÿ¶ÿ©!`);
                return;
            }
            
            currentEditingStudent.name = newName;
            currentEditingStudent.group = newGroup;
            
            localStorage.setItem('students', JSON.stringify(students));
            updateDisplay();
            closeEditModal();
            alert('ÿ™ŸÖ ÿ≠ŸÅÿ∏ ÿßŸÑÿ™ÿπÿØŸäŸÑÿßÿ™ ÿ®ŸÜÿ¨ÿßÿ≠');
        });

        // Delete student
        document.getElementById('deleteStudent').addEventListener('click', function() {
            if (confirm('ŸáŸÑ ÿ£ŸÜÿ™ ŸÖÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿ≠ÿ∞ŸÅ Ÿáÿ∞ÿß ÿßŸÑÿ∑ÿßŸÑÿ®ÿü')) {
                students = students.filter(s => s.id !== currentEditingStudent.id);
                localStorage.setItem('students', JSON.stringify(students));
                updateDisplay();
                closeEditModal();
                alert('ÿ™ŸÖ ÿ≠ÿ∞ŸÅ ÿßŸÑÿ∑ÿßŸÑÿ®');
            }
        });

        // Cancel edit
        document.getElementById('cancelEdit').addEventListener('click', closeEditModal);

        function closeEditModal() {
            document.getElementById('editModal').classList.add('hidden');
            document.getElementById('editModal').classList.remove('flex');
            currentEditingStudent = null;
        }

        // Update display
        function updateDisplay() {
            const groupA = students.filter(s => s.group === 'A');
            const groupB = students.filter(s => s.group === 'B');
            
            // Update counters
            document.getElementById('groupACount').textContent = groupA.length;
            document.getElementById('groupARemaining').textContent = 100 - groupA.length;
            document.getElementById('groupBCount').textContent = groupB.length;
            document.getElementById('groupBRemaining').textContent = 100 - groupB.length;
            
            // Update progress bars
            document.getElementById('groupAProgress').style.width = (groupA.length / 100 * 100) + '%';
            document.getElementById('groupBProgress').style.width = (groupB.length / 100 * 100) + '%';
            
            // Update lists
            updateStudentList('groupAList', groupA, 'A');
            updateStudentList('groupBList', groupB, 'B');
        }

        function updateStudentList(containerId, students, group) {
            const container = document.getElementById(containerId);
            
            if (students.length === 0) {
                container.innerHTML = '<p class="text-gray-500 text-center py-4">ŸÑÿß ŸäŸàÿ¨ÿØ ÿ∑ŸÑÿßÿ® ŸÖÿ≥ÿ¨ŸÑŸäŸÜ ÿ®ÿπÿØ</p>';
                return;
            }
            
            container.innerHTML = students.map((student, index) => `
                <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
                    <div class="flex items-center gap-3">
                        <span class="w-8 h-8 bg-${group === 'A' ? 'blue' : 'purple'}-100 text-${group === 'A' ? 'blue' : 'purple'}-600 rounded-full flex items-center justify-center font-semibold text-sm">
                            ${index + 1}
                        </span>
                        <span class="font-medium">${student.name}</span>
                    </div>
                    <button onclick="editStudent(${student.id})" 
                            class="text-sm bg-${group === 'A' ? 'blue' : 'purple'}-600 text-white px-3 py-1 rounded-lg hover:bg-${group === 'A' ? 'blue' : 'purple'}-700 transition-colors">
                        ‚úèÔ∏è ÿ™ÿπÿØŸäŸÑ
                    </button>
                </div>
            `).join('');
        }

        // Close modal when clicking outside
        document.getElementById('editModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeEditModal();
            }
        });
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'97ffcc1be0af6ea0',t:'MTc1ODAxOTc2Ny4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
